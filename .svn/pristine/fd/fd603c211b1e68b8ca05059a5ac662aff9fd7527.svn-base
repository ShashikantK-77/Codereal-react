import React, { useState, useEffect, useContext } from "react";
import {
  Button,
  Card,
  CardBody,
  Input,
  Label,
  Pagination,
  Select,
  Table,
  TableCell,
  TableContainer,
  TableFooter,
  TableHeader,
} from "@windmill/react-ui";
import { IoCloudDownloadOutline } from "react-icons/io5";
import { useTranslation } from "react-i18next";
import exportFromJSON from "export-from-json";
import NotFound from "components/table/NotFound";
import TableLoading from "components/preloader/TableLoading";
import { notifyError } from "utils/toast";
import { useListContext } from "context/ListContext";
import PaperOrder from "components/order/PaperOrder";
import PageTitle from "components/Typography/PageTitle";
import PLTable from "components/order/PLTable";
import BarChart from "components/chart/BarChart/BarChart";
import LineChart from "components/chart/LineChart/LineChart";
import { Link } from "@react-pdf/renderer";
import DonutChart from "components/chart/DonutChart/DonutChart";
import GroupBarChart from "components/chart/GroupBarChart/GroupBarChart";
import { AdminContext } from "context/AdminContext";

const PnLReport = () => {
  const [orders, setOrders] = useState([]);
  const [selectedStrategy, setSelectedStrategy] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalResults, setTotalResults] = useState([]);
  const { masterorderList } = useListContext();
  const resultsPerPage = 10; // Number of results per page
  const { t } = useTranslation();
  const [loadingExport, setLoadingExport] = useState(false);
  const [loading, setLoading] = useState(true);
  const [orderDetails, setOrderDetails] = useState([]);
  const [strategyOptions, setstrategyOptions] = useState([]);
  const [strategyDetails, setStrategyDetails] = useState([]);

  const [strategyorders, setStrategyOrders] = useState([]);

  const [buyPrice, setBuyPrice] = useState(null);
  const [sellPrice, setSellPrice] = useState(null);

  const [pnl, setPnl] = useState(0);
  const [netPnl, setNetPnl] = useState(0);
  const transactionCosts = 0.01; // Example transaction cost per unit

  const { state } = useContext(AdminContext);
  const { zenithQuark } = state;

  console.log("selectedStrategy is here:", selectedStrategy);
  console.log("strategyOptions:", strategyOptions);

  console.log("strategyDetails:", strategyDetails);

  console.log("strategyorders:", strategyorders);
  // Static data for strategy dropdown (replace with actual data)

  const [securityId, setSecurityId] = useState("");
  const [ltp, setLtp] = useState(0); // Assuming LTP is a number

  console.log("securityId,ltp:", securityId, ltp);
  console.log("orderDetails:",orderDetails);
  const salesReport = [
    { date: "2024-01-01", total: 1000, order: 20 },
    { date: "2024-01-02", total: 1500, order: 30 },
    { date: "2024-01-03", total: 1200, order: 25 },
    { date: "2024-01-04", total: 1800, order: 35 },
    { date: "2024-01-05", total: 2000, order: 40 },
    { date: "2024-01-06", total: 2200, order: 45 },
    { date: "2024-01-07", total: 2500, order: 50 },
  ];

  const salesReport2 = [
    { date: "January", totalSales: 1500 },
    { date: "February", totalSales: 1800 },
    { date: "March", totalSales: 2000 },
    { date: "April", totalSales: 2200 },
    { date: "May", totalSales: 1900 },
    { date: "June", totalSales: 2300 },
    { date: "July", totalSales: 900 },
  ];

  const [chartData, setChartData] = useState(null);

  const transformDataForChart = (orders) => {
    const labels = orders.map((order) => order.transactionType); // assuming each order has a date field
    const dataset1 = orders.map((order) => order.quantity); // replace with actual data field
    const dataset2 = orders.map((order) => order.price); // replace with actual data field
    const dataset3 = orders.map((order) => order.filled_qty); // replace with actual data field

    return {
      labels,
      datasets: [
        {
          label: "Quantity",
          data: dataset1,
          backgroundColor: "rgb(255, 99, 132)",
          stack: "Stack 0",
        },
        {
          label: "Price",
          data: dataset2,
          backgroundColor: "rgb(75, 192, 192)",
          stack: "Stack 1",
        },
        {
          label: "filled_qty",
          data: dataset3,
          backgroundColor: "rgb(53, 162, 235)",
          stack: "Stack 2",
        },
      ],
    };
  };

  // Add the following useEffect inside your PnLReport component
  useEffect(() => {
    setChartData(transformDataForChart(strategyorders)); // Transform and set chart data
  }, [strategyorders]);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch(
          "http://localhost:3001/api/execstrategies",
          {
            headers: {
              "Content-Type": "application/json",
              // Add any other necessary headers here
            },
          }
        );
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await response.json();
        setstrategyOptions(data);
        // setOrders(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching orders:", error);
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

 
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setLoading(true);

        const response = await fetch(
          `http://localhost:3001/api/orders/${selectedStrategy}`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        setStrategyOrders(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching orders:", error);
        setLoading(false);
        // Handle error notification or logging here
      }
    };

    if (selectedStrategy) {
      fetchOrders(); // Call fetchOrders when selectedStrategy changes
    }
  }, [selectedStrategy]);

  useEffect(() => {
    const fetchOrderDetails = async () => {
      try {
        setLoading(true); // Set loading to true before fetching
  
        const response = await fetch(`http://localhost:5000/order/orders/${selectedStrategy}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            // Add any other necessary headers here, such as authorization if required
          },
        });
  
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
  
        const data = await response.json();
        setOrderDetails(data.details); // Assuming you want to store this in orderDetails
        setStrategyOrders(data.details)
        setSecurityId(data.details[0].security_id)
        setLoading(false); // Set loading to false after fetching
      } catch (error) {
        console.error("Error fetching order details:", error);
        setLoading(false); // Set loading to false on error
        // Handle error notification or logging here
      }
    };
  
    fetchOrderDetails(); // Call fetchOrderDetails immediately
  }, [selectedStrategy]);
  useEffect(() => {
    const fetchLtp = async () => {
      if (!securityId) return;
  
      try {
        const response = await fetch(`http://localhost:5000/python/getltp/${securityId}`);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
  
        const data = await response.json();
        setLtp(data.matchedRow.LTP); // Assuming API returns LTP in this structure
      } catch (error) {
        console.error("Error fetching LTP:", error);
        // Handle error
      }
    };
  
    fetchLtp();
  }, [securityId]); // Run when securityId changes
  

  useEffect(() => {
    const filteredOrders = masterorderList.filter((order) => {
      // Apply strategy filter
      if (selectedStrategy && order.strategy !== selectedStrategy) {
        return false;
      }

      // Apply date filter
      if (selectedDate) {
        const orderDate = new Date(order.createdAt).toDateString();
        const filterDate = new Date(selectedDate).toDateString();
        if (orderDate !== filterDate) {
          return false;
        }
      }

      // If all filters pass, include the order
      return true;
    });

    const startIndex = (currentPage - 1) * resultsPerPage;
    const endIndex = startIndex + resultsPerPage;

    const paginatedOrders = filteredOrders.slice(startIndex, endIndex);
    setOrders(paginatedOrders);

    setTotalResults(filteredOrders.length);
  }, [
    masterorderList,
    currentPage,
    resultsPerPage,
    selectedStrategy,
    selectedDate,
  ]);

  // useEffect(() => {
  //   if (strategyorders.length > 0) {
  //     const buyOrder = strategyorders.find(
  //       (order) => order.transactionType === "BUY"
  //     );
  //     const sellOrder = strategyorders.find(
  //       (order) => order.transactionType === "SELL"
  //     );

  //     setBuyPrice(buyOrder ? buyOrder.price : null);
  //     setSellPrice(sellOrder ? sellOrder.price : null);
  //   }
  // }, [strategyorders]);

  // Fetch security ID based on trading symbol (from strategyorders)
  // useEffect(() => {
  //   const fetchSecurityId = async () => {
  //     if (strategyorders.length === 0) {
  //       return;
  //     }

  //     const tradingSymbol = strategyorders[0].tradingSymbol; // Assuming only one item for simplicity
  //     try {
  //       const response = await fetch(
  //         `http://localhost:3001/api/getsecurityid/${tradingSymbol}`
  //       );

  //       if (!response.ok) {
  //         throw new Error(`HTTP error! Status: ${response.status}`);
  //       }

  //       const data = await response.json();
  //       setSecurityId(data.securityId);
  //     } catch (error) {
  //       console.error("Error fetching security ID:", error);
  //       // Handle error notification or logging here
  //     }
  //   };

  //   fetchSecurityId(); // Call fetchSecurityId immediately
  // }, [strategyorders]);

  // Fetch LTP based on security ID
  // useEffect(() => {
  //   const fetchLtp = async () => {
  //     if (!securityId) {
  //       return;
  //     }

  //     try {
  //       const response = await fetch(
  //         `http://localhost:3001/api/getltp/${securityId}`
  //       );

  //       if (!response.ok) {
  //         throw new Error(`HTTP error! Status: ${response.status}`);
  //       }

  //       const data = await response.json();
  //       console.log("data /getltp:", data);
  //       setLtp(data.matchedRow.LTP); // Assuming the response structure has ltp field
  //       // setStrategyOrders(strategyorders.data.matchedRow.LTP)
  //     } catch (error) {
  //       console.error("Error fetching LTP:", error);
  //       // Handle error notification or logging here
  //     }
  //   };

  //   fetchLtp(); // Call fetchLtp when securityId changes
  // }, [securityId]);

  const handleChangePage = (page) => {
    setCurrentPage(page);
  };

  const handleDownloadOrders = async () => {
    try {
      setLoadingExport(true);

      const exportData = masterorderList.map((order) => ({
        _id: order.orderno,
        orderdate: order.orderdate,
        symbol: order.symbol,
        quantity: order.status,
        status: order.status,
      }));

      exportFromJSON({
        data: exportData,
        fileName: "orders",
        exportType: exportFromJSON.types.csv,
      });

      setLoadingExport(false);
    } catch (err) {
      setLoadingExport(false);
      console.log("Error on orders download", err);
      notifyError(err ? err.response?.data?.message : err.message);
    }
  };



  useEffect(() => {
    // Fetch strategy details from the API
    const fetchStrategyDetails = async () => {
      try {
        const response = await fetch(
          "http://localhost:5000/strategy/getpnlstartegies",
          {
            method: "get", // Change to POST method
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${zenithQuark}`, // Replace zenithQuark with your actual token variable
            },
          }
        );

        const data = await response.json();

        if (data.is_success) {
          // Set the fetched strategy details to state
          console.log("details in pnl:", data.details);
          setStrategyDetails(data.details);
        } else {
          console.error("Failed to fetch strategies");
        }
      } catch (error) {
        console.error("Error fetching strategies:", error);
      }
    };

    fetchStrategyDetails();
  }, []);

  useEffect(() => {
    const fetchLtp = async () => {
      if (!securityId) return;
  
      try {
        const response = await fetch(`http://localhost:5000/python/getltp/${securityId}`);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
  
        const data = await response.json();
        setLtp(data.matchedRow.LTP); // Assuming API returns LTP in this structure
      } catch (error) {
        console.error("Error fetching LTP:", error);
        // Handle error
      }
    };
  
    fetchLtp();
  }, [securityId]); // Run when securityId changes
  
  useEffect(() => {
    const calculatePnL = () => {
      console.log("calculatePnL orders:",orders);
        const entryOrders = orders.filter(order => order.order_category === 'Entry');
        const targetOrders = orders.filter(order => order.order_category === 'Target');

        let totalPnL = 0;

        entryOrders.forEach(entryOrder => {
            const matchingTargetOrder = targetOrders.find(targetOrder => targetOrder.main_order_id === entryOrder.broker_order_id);
            if (matchingTargetOrder) {
                const sellPrice = parseFloat(matchingTargetOrder.execution_price);
                const buyPrice = parseFloat(entryOrder.execution_price);
                const quantity = entryOrder.quantity; // Assuming quantity is the same for both entry and target orders

                const orderPnL = (sellPrice - buyPrice) * quantity;
                totalPnL += orderPnL;
            }
        });

        setPnl(totalPnL);
        setNetPnl(totalPnL - (transactionCosts * entryOrders.length)); // Example: Assuming transaction cost is applied per order
    };

    calculatePnL();
}, [selectedStrategy]);


  // const transformedData = transformDataForCombinedDonutChart(strategyorders);
  return (
    <>
      <PageTitle>PnL Summary:</PageTitle>

      <Card className="min-w-0 shadow-xs overflow-hidden bg-white dark:bg-gray-800 mb-5">
        <CardBody>
          <form>
            <div className="grid gap-4 lg:gap-6 xl:gap-6 lg:grid-cols-2 xl:grid-cols-2 md:grid-cols-2 sm:grid-cols-1 py-2">
              <div>
                <Label className="block text-sm">
                  <span>{t("Select Strategy")}</span>

                  <Select
                    className="mt-1 border h-12 text-sm focus:outline-none block w-full bg-gray-100 border-transparent focus:bg-white"
                    value={selectedStrategy}
                    onChange={(e) => setSelectedStrategy(e.target.value)}
                  >
                    <option value="">Select a strategy</option>
                    {strategyDetails.map((strategy) => (
                      <option
                        key={strategy.strategyDesc.strategy_id}
                        value={strategy.strategyDesc.strategy_id}
                      >
                        {strategy.strategyDesc.strategy_name}
                      </option>
                    ))}
                  </Select>
                </Label>
              </div>

              <div>
                <Label className="block text-sm">
                  <span>{t("Select Date")}</span>
                  <Input
                    type="date"
                    className="mt-1 border h-12 text-sm focus:outline-none block w-full bg-gray-100 border-transparent focus:bg-white"
                    value={selectedDate}
                    onChange={(e) => setSelectedDate(e.target.value)}
                  />
                </Label>
              </div>
            </div>
          </form>
        </CardBody>
      </Card>

      <Card className="p-4 border border-gray-200 rounded-lg shadow-md w-full mb-4">
        <CardBody>
          <div className="flex">
            <div className="w-5/12">
              {/* <LineChart salesReport={salesReport} /> */}
              {/* <DonutChart/> */}
              {/* <DonutChart data={transformedData} /> */}
              {chartData && <GroupBarChart data={chartData} />}
            </div>
            <div className="w-1/2 relative">
              {/* <h2 className="font-normal">Strategy Period</h2>
              <p className="font-semibold">Timing: Monday, February 14, 2024</p>
              <div className="m-4 flex justify-center items-center">
             
               <h1>StopLoss Orders:</h1> 
          
               <p>{JSON.stringify(StopLossOrders, null, 2)}</p>
               <h1>Book Profit Orders:</h1> 
            
               <p>{JSON.stringify(bookprofitOrders, null, 2)}</p>
              </div> */}
              {/* <BarChart salesReport={salesReport2}/> */}

              <div className="flex flex-wrap ">
                <>
                  <Card className="flex-auto p-1 border border-gray-200 rounded-lg shadow-md mx-2 my-2 w-64 h-32">
                    <div className="w-full h-full flex flex-col justify-center items-center">
                      <h2 className="text-lg font-semibold mb-1">
                        Total Trades
                      </h2>
                      <p className="text-2xl font-bold text-green-500">
                        {strategyorders.length}
                      </p>
                    </div>
                  </Card>

                  <Card className="flex-auto p-1 border border-gray-200 rounded-lg shadow-md mx-2 my-2 w-64 h-32">
                    <div className="w-full h-full flex flex-col justify-center items-center">
                      <h2 className="text-lg font-semibold mb-1">
                        Current Value
                      </h2>
                      <p className="text-2xl font-bold text-green-500">{ltp}</p>
                    </div>
                  </Card>

                  <Card className="flex-auto p-1 border border-gray-200 rounded-lg shadow-md mx-2 my-2 w-64 h-32">
                    <div className="w-full h-full flex flex-col justify-center items-center">
                      <h2 className="text-lg font-semibold mb-1">PnL</h2>
                      <p className="text-2xl font-bold text-red-600">
                      {pnl.toFixed(2)}
                      </p>
                    </div>
                  </Card>
                  <Card className="flex-auto p-1 border border-gray-200 rounded-lg shadow-md mx-2 my-2 w-64 h-32">
                    <div className="w-full h-full flex flex-col justify-center items-center">
                      <h2 className="text-lg font-semibold mb-1">Net PnL</h2>
                      <p className="text-2xl font-bold text-red-600">
                      {netPnl.toFixed(2)}
                      </p>
                    </div>
                  </Card>
                </>
              </div>
              <Link to="/orders">
                <button className="absolute bottom-0 right-0 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                  View all orders
                </button>
              </Link>
            </div>
          </div>
        </CardBody>
      </Card>

      {/* <div className="flex justify-between items-center mb-4">
        <Button onClick={handleDownloadOrders} className="rounded-md h-12">
          <IoCloudDownloadOutline className="text-lg" />
          <span>{t("Export")}</span>
        </Button>
      </div> */}

      <TableContainer className="mb-8 dark:bg-gray-900">
        <Table>
          <TableHeader>
            <tr>
              <TableCell className="text-center">Symbol</TableCell>
              <TableCell className="text-center">Qty</TableCell>
              <TableCell className="text-center">Order Price</TableCell>
              <TableCell className="text-center">transactionType</TableCell>

              <TableCell className="text-center">Ltp</TableCell>
              {/* <TableCell className="text-center">P&L</TableCell>
              <TableCell className="text-center">Net Change</TableCell>
              <TableCell className="text-center">Day Change</TableCell> */}
              <TableCell className="text-center">Status</TableCell>
            </tr>
          </TableHeader>

          {/* Render order table */}
          {loading ? (
            <TableLoading />
          ) : strategyorders.length ? (
            <PLTable orders={strategyorders} ltp={ltp} />
          ) : (
            <NotFound title="Order" />
          )}
        </Table>
      </TableContainer>
    </>
  );
};

export default PnLReport;

